# RootLogger使用的处理器, 可以指定多个handler
handlers= java.util.logging.ConsoleHandler, java.util.logging.FileHandler

## RootLogger日志等级。RootLogger的name为空，因此.前面什么也没有
.level= ALL

#输出到文件中
# 输出日志文件路径
java.util.logging.FileHandler.pattern = D:/logs/java%u.log 
#输出日志文件限制大小（50000字节）
java.util.logging.FileHandler.limit = 50000
# 输出日志文件限制个数
java.util.logging.FileHandler.count = 5
#java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
#指定追加方式添加日志内容 默认是false. 源码中 java.util.logging.FileHandler.configure()中配置
java.util.logging.FileHandler.append=true

#输出到控制台
# 指定Handler的日志级别
java.util.logging.ConsoleHandler.level = ALL
# 指定Handler对象的日志消息格式对象
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
# 指定Handler的字符集
java.util.logging.ConsoleHandler.encoding=UTF-8

#指定日志消息格式
java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

# 单独设置某一个package下的日志级别
# com.xyz.foo.level = SEVERE


#***************************************** 以上定义都是对RootLogger的设置 ******************************
## 自定义Logger
cn.java.money.handlers= java.util.logging.ConsoleHandler
# 自定义Logger日志等级
cn.java.money.level= CONFIG
# 忽略父日志设置 如果不设置就会把父logger的配置继承过来
cn.java.money.useParentHandlers=false


