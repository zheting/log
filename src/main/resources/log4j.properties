##********* RootLogger的配置 ***************
#指定日志级别，和一个或多个appender
log4j.rootLogger=trace,console,file,rollingFile,dailyRollingFile,logDB

##********* 输出日志到控制台的配置 ***************
#console是自定义的appender
log4j.appender.console=org.apache.log4j.ConsoleAppender
#log4j.appender.console.layout=org.apache.log4j.SimpleLayout
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#指定消息的格式内容. log4j.appender.console.layout现在代表的就是org.apache.log4j.PatternLayout， conversionPattern是PatternLayout的一个属性，相当于给属性赋值
#log4j.appender.console.layout.conversionPattern= [%p]%r %c %t %F %L %d{yyyy-MM-dd HH:mm:ss} %m%n
# %l 替换  %c %t %F %L
log4j.appender.console.layout.conversionPattern= [%-5p] %r %d{yyyy-MM-dd HH:mm:ss} %l  %m%n


# %m 输出代码中指定的日志信息
# %p 输出优先级，及 DEBUG、INFO 等
# %n 换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）
# %r 输出自应用启动到输出该 log 信息耗费的毫秒数
# %c 输出打印语句所属的类的全名
# %t 输出产生该日志的线程全名
# %d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日 HH:mm:ss}
# %l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如： Test.main(Test.java:10)
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中的行号
# %% 输出一个 "%" 字符

# 可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：
#  %5c 输出category名称，最小宽度是5，category<5，默认的情况下右对齐
#  %-5c 输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
#  %.5c 输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不会有空格
#  %20.30c category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉

##********* 输出日志到文件的配置 ***************
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.conversionPattern= [%-5p] %r %d{yyyy-MM-dd HH:mm:ss} %l  %m%n
# 这里使用的OGNL表达式
log4j.appender.file.file=D:/logs/log4j.log
log4j.appender.file.encoding=UTF-8


##********* 输出日志到文件 按照大小拆分 ***************
log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender
log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.rollingFile.layout.conversionPattern= [%-5p] %r %d{yyyy-MM-dd HH:mm:ss} %l  %m%n
log4j.appender.rollingFile.file=D:/logs/log4j-rollingFile.log
log4j.appender.rollingFile.encoding=UTF-8
#指定日志文件的大小，大于1M就生成新的日志文件
log4j.appender.rollingFile.maxFileSize=1MB
#指定日志文件的数量,超过10个会把最早的日志移除
log4j.appender.rollingFile.maxBackupIndex=10

##********* 输出日志到文件 按照时间拆分 ***************
log4j.appender.dailyRollingFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyRollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.dailyRollingFile.layout.conversionPattern= [%-5p] %r %d{yyyy-MM-dd HH:mm:ss} %l  %m%n
log4j.appender.dailyRollingFile.file=D:/logs/log4j-dailyRollingFile.log
log4j.appender.dailyRollingFile.encoding=UTF-8
# 以秒为单位分隔，默认是按照天分隔 '.'yyyy-MM-dd
log4j.appender.dailyRollingFile.datePattern='.'yyyy-MM-dd-HH-mm-ss


##********* 保存日志到 数据库 ***************
log4j.appender.logDB=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.logDB.layout=org.apache.log4j.PatternLayout
log4j.appender.logDB.Driver=com.mysql.cj.jdbc.Driver
log4j.appender.logDB.URL=jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&&serverTimezone=GMT
log4j.appender.logDB.User=root
log4j.appender.logDB.Password=123456
log4j.appender.logDB.Sql=INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values('itcast','%d{yyyy-MM-dd HH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')


##====================================== 以上都是继承 RootLogger ===================================================


#自定义logger对象设置(会把cn.java.money.log4j下的log的info及以上日志输出到文件)
log4j.logger.cn.java.money.log4j=info,file
log4j.logger.org.apache = error
